{
	"info": {
		"_postman_id": "739684c8-4f0d-4990-92e9-19d761ec07a5",
		"name": "Cinelist - Series",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "44926338",
		"_collection_link": "https://interstellar-satellite-9627242.postman.co/workspace/Marcus-Vin%C3%ADcius's-Workspace~855b6e5c-4ec4-416d-827e-181b42c7a1aa/collection/44926338-739684c8-4f0d-4990-92e9-19d761ec07a5?action=share&source=collection_link&creator=44926338"
	},
	"item": [
		{
			"name": "Listar series",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status deve ser 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Resposta deve ser um array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Cada item deve conter campos obrigatórios de série\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    jsonData.forEach(item => {\r",
							"        pm.expect(item).to.have.property(\"id\");\r",
							"        pm.expect(item).to.have.property(\"name\");\r",
							"        pm.expect(item).to.have.property(\"overview\");\r",
							"        pm.expect(item).to.have.property(\"first_air_date\");\r",
							"        pm.expect(item).to.have.property(\"vote_average\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Primeiro item deve ser 'Wednesday'\", function () {\r",
							"    let first = pm.response.json()[0];\r",
							"    pm.expect(first.name).to.eql(\"Wednesday\");\r",
							"    pm.expect(first.original_name).to.eql(\"Wednesday\");\r",
							"    pm.expect(first.vote_average).to.be.above(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8000/series/"
			},
			"response": []
		},
		{
			"name": "Buscar por serie existente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status deve ser 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Resposta deve ser um array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Cada item deve conter campos obrigatórios de série\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    jsonData.forEach(item => {\r",
							"        pm.expect(item).to.have.property(\"id\");\r",
							"        pm.expect(item).to.have.property(\"name\");\r",
							"        pm.expect(item).to.have.property(\"overview\");\r",
							"        pm.expect(item).to.have.property(\"first_air_date\");\r",
							"        pm.expect(item).to.have.property(\"vote_average\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8000/series/search/{Two and a Half Men}"
			},
			"response": []
		},
		{
			"name": "Avaliando uma serie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Testa se o status da resposta é 200\r",
							"pm.test(\"Status deve ser 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Testa se a resposta é um JSON\r",
							"pm.test(\"Resposta deve ser JSON\", function() {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// Testa se a mensagem retornada está correta\r",
							"pm.test(\"Mensagem correta\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"serie avaliado\");\r",
							"});\r",
							"\r",
							"// Testa se o rating retornado está correto\r",
							"pm.test(\"Rating correto\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.rating).to.eql(9.0);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/media/rate/serie/99?rating=9",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"media",
						"rate",
						"serie",
						"99"
					],
					"query": [
						{
							"key": "rating",
							"value": "9"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Avaliando uma serie já avaliada",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code deve ser 409 (Conflict)\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"\r",
							"pm.test(\"Resposta contém detalhe do conflito\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"detail\");\r",
							"    pm.expect(jsonData.detail).to.include(\"já foi avaliado\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/media/rate/serie/99?rating=9",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"media",
						"rate",
						"serie",
						"99"
					],
					"query": [
						{
							"key": "rating",
							"value": "9"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Avaliando uma serie com nota inválida",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code deve ser 400 (Bad Request)\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Resposta contém detalhe do erro de validação\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"detail\");\r",
							"    pm.expect(jsonData.detail).to.eql(\"A nota deve estar entre 0 e 10.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/media/rate/serie/99?rating=-9",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"media",
						"rate",
						"serie",
						"99"
					],
					"query": [
						{
							"key": "rating",
							"value": "-9"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Avaliando serie com ID invalida",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code deve ser 422 (Unprocessable Entity)\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"Resposta contém detalhe de erro de parsing\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"detail\");\r",
							"    pm.expect(jsonData.detail[0]).to.have.property(\"type\", \"int_parsing\");\r",
							"    pm.expect(jsonData.detail[0]).to.have.property(\"loc\");\r",
							"    pm.expect(jsonData.detail[0].loc).to.include(\"path\");\r",
							"    pm.expect(jsonData.detail[0].loc).to.include(\"media_id\");\r",
							"    pm.expect(jsonData.detail[0]).to.have.property(\"msg\", \"Input should be a valid integer, unable to parse string as an integer\");\r",
							"    pm.expect(jsonData.detail[0]).to.have.property(\"input\", \"Q\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/media/rate/serie/Q?rating=-9",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"media",
						"rate",
						"serie",
						"Q"
					],
					"query": [
						{
							"key": "rating",
							"value": "-9"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Atualizando avaliação de uma serie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Testa se o status da resposta é 200\r",
							"pm.test(\"Status deve ser 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Testa se a resposta é um JSON\r",
							"pm.test(\"Resposta deve ser JSON\", function() {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// Testa se a mensagem retornada está correta\r",
							"pm.test(\"Mensagem correta\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Avaliação de serie atualizada\");\r",
							"});\r",
							"\r",
							"// Testa se o rating retornado está correto\r",
							"pm.test(\"Rating correto\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.rating).to.eql(10.0);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/media/rate/serie/99?rating=10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"media",
						"rate",
						"serie",
						"99"
					],
					"query": [
						{
							"key": "rating",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Atualizando nota inexistente de uma serie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status deve ser 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Resposta deve conter mensagem de erro correta\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"detail\", \"Serie não encontrado no banco de dados\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/media/rate/serie/9?rating=10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"media",
						"rate",
						"serie",
						"9"
					],
					"query": [
						{
							"key": "rating",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Atualizando avaliação com nota inválida",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code deve ser 400 (Bad Request)\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Resposta contém detalhe do erro de validação\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"detail\");\r",
							"    pm.expect(jsonData.detail).to.eql(\"A nota deve estar entre 0 e 10.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/media/rate/serie/99?rating=-10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"media",
						"rate",
						"serie",
						"99"
					],
					"query": [
						{
							"key": "rating",
							"value": "-10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Atualizando nota com ID inválida",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code deve ser 422 (Unprocessable Entity)\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"Resposta contém detalhe de erro de parsing\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"detail\");\r",
							"    pm.expect(jsonData.detail[0]).to.have.property(\"type\", \"int_parsing\");\r",
							"    pm.expect(jsonData.detail[0]).to.have.property(\"loc\");\r",
							"    pm.expect(jsonData.detail[0].loc).to.include(\"path\");\r",
							"    pm.expect(jsonData.detail[0].loc).to.include(\"media_id\");\r",
							"    pm.expect(jsonData.detail[0]).to.have.property(\"msg\", \"Input should be a valid integer, unable to parse string as an integer\");\r",
							"    pm.expect(jsonData.detail[0]).to.have.property(\"input\", \"Q\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/media/rate/serie/Q?rating=10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"media",
						"rate",
						"serie",
						"Q"
					],
					"query": [
						{
							"key": "rating",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Deletando avaliação de uma série",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Testa se o status da resposta é 200\r",
							"pm.test(\"Status deve ser 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Testa se a resposta é um JSON\r",
							"pm.test(\"Resposta deve ser JSON\", function() {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// Testa se a mensagem retornada está correta\r",
							"pm.test(\"Mensagem correta\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Serie removido do banco de dados\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "http://localhost:8000/media/rate/serie/99/"
			},
			"response": []
		},
		{
			"name": "Deletando avaliação inexistente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code deve ser 404 (Not Found)\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Resposta contém detalhe do erro\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"detail\");\r",
							"    pm.expect(jsonData.detail).to.eql(\"Serie não encontrado no banco de dados\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "http://localhost:8000/media/rate/serie/99/"
			},
			"response": []
		},
		{
			"name": "Deletando serie com ID inválida",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code deve ser 422 (Unprocessable Entity)\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"Resposta contém detalhe de erro de parsing\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"detail\");\r",
							"    pm.expect(jsonData.detail[0]).to.have.property(\"type\", \"int_parsing\");\r",
							"    pm.expect(jsonData.detail[0]).to.have.property(\"loc\");\r",
							"    pm.expect(jsonData.detail[0].loc).to.include(\"path\");\r",
							"    pm.expect(jsonData.detail[0].loc).to.include(\"media_id\");\r",
							"    pm.expect(jsonData.detail[0]).to.have.property(\"msg\", \"Input should be a valid integer, unable to parse string as an integer\");\r",
							"    pm.expect(jsonData.detail[0]).to.have.property(\"input\", \"Q\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "http://localhost:8000/media/rate/serie/Q/"
			},
			"response": []
		}
	]
}