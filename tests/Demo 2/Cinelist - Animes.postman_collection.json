{
	"info": {
		"_postman_id": "9a45be4e-9ea4-4dd4-9349-dc774d5076bd",
		"name": "Cinelist - Animes",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "44926338",
		"_collection_link": "https://interstellar-satellite-9627242.postman.co/workspace/Marcus-Vin%C3%ADcius's-Workspace~855b6e5c-4ec4-416d-827e-181b42c7a1aa/collection/44926338-9a45be4e-9ea4-4dd4-9349-dc774d5076bd?action=share&source=collection_link&creator=44926338"
	},
	"item": [
		{
			"name": "Listar animes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status deve ser 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Testa se o corpo da resposta é um array não vazio\r",
							"pm.test(\"Corpo da resposta deve ser um array não vazio\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"    pm.expect(jsonData.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"// Testa se todos os objetos possuem 'id' inteiro\r",
							"pm.test(\"Todos os itens devem ter 'id' inteiro\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(function(item) {\r",
							"        pm.expect(item.id).to.be.a(\"number\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// Testa se todos os objetos possuem 'title' com chave 'romaji'\r",
							"pm.test(\"Todos os itens devem ter 'title.romaji'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property(\"title\");\r",
							"        pm.expect(item.title).to.have.property(\"romaji\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8000/anime/"
			},
			"response": []
		},
		{
			"name": "Busca por anime existente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Testa se a resposta retornou status 200\r",
							"pm.test(\"Status deve ser 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Testa se o corpo da resposta é um array não vazio\r",
							"pm.test(\"Corpo da resposta deve ser um array não vazio\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"    pm.expect(jsonData.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"// Testa se todos os objetos possuem 'id' inteiro\r",
							"pm.test(\"Todos os itens devem ter 'id' inteiro\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(function(item) {\r",
							"        pm.expect(item.id).to.be.a(\"number\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// Testa se todos os objetos possuem 'title' com chave 'romaji'\r",
							"pm.test(\"Todos os itens devem ter 'title.romaji'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property(\"title\");\r",
							"        pm.expect(item.title).to.have.property(\"romaji\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8000/anime/search/{Naruto Shippuden}"
			},
			"response": []
		},
		{
			"name": "Avaliando um anime",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Testa se o status da resposta é 200\r",
							"pm.test(\"Status deve ser 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Testa se a resposta é um JSON\r",
							"pm.test(\"Resposta deve ser JSON\", function() {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// Testa se a mensagem retornada está correta\r",
							"pm.test(\"Mensagem correta\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"anime avaliado\");\r",
							"});\r",
							"\r",
							"// Testa se o rating retornado está correto\r",
							"pm.test(\"Rating correto\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.rating).to.eql(9.0);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/media/rate/anime/92?rating=9",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"media",
						"rate",
						"anime",
						"92"
					],
					"query": [
						{
							"key": "rating",
							"value": "9"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Avaliando um anime já avaliado",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code deve ser 409 (Conflict)\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"\r",
							"pm.test(\"Resposta contém detalhe do conflito\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"detail\");\r",
							"    pm.expect(jsonData.detail).to.include(\"já foi avaliado\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/media/rate/anime/92?rating=9",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"media",
						"rate",
						"anime",
						"92"
					],
					"query": [
						{
							"key": "rating",
							"value": "9"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Avaliando anime com nota inválida",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code deve ser 400 (Bad Request)\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Resposta contém detalhe do erro de validação\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"detail\");\r",
							"    pm.expect(jsonData.detail).to.eql(\"A nota deve estar entre 0 e 10.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/media/rate/anime/92?rating=100",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"media",
						"rate",
						"anime",
						"92"
					],
					"query": [
						{
							"key": "rating",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Avaliando um anime com ID inválida",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code deve ser 422 (Unprocessable Entity)\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"Resposta contém detalhe de erro de parsing\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"detail\");\r",
							"    pm.expect(jsonData.detail[0]).to.have.property(\"type\", \"int_parsing\");\r",
							"    pm.expect(jsonData.detail[0]).to.have.property(\"loc\");\r",
							"    pm.expect(jsonData.detail[0].loc).to.include(\"path\");\r",
							"    pm.expect(jsonData.detail[0].loc).to.include(\"media_id\");\r",
							"    pm.expect(jsonData.detail[0]).to.have.property(\"msg\", \"Input should be a valid integer, unable to parse string as an integer\");\r",
							"    pm.expect(jsonData.detail[0]).to.have.property(\"input\", \"Q\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/media/rate/anime/Q?rating=9",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"media",
						"rate",
						"anime",
						"Q"
					],
					"query": [
						{
							"key": "rating",
							"value": "9"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Atualizando avaliação de um anime",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Testa se o status da resposta é 200\r",
							"pm.test(\"Status deve ser 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Testa se a resposta é um JSON\r",
							"pm.test(\"Resposta deve ser JSON\", function() {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// Testa se a mensagem retornada está correta\r",
							"pm.test(\"Mensagem correta\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Avaliação de anime atualizada\");\r",
							"});\r",
							"\r",
							"// Testa se o rating retornado está correto\r",
							"pm.test(\"Rating correto\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.rating).to.eql(10.0);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/media/rate/anime/92?rating=10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"media",
						"rate",
						"anime",
						"92"
					],
					"query": [
						{
							"key": "rating",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Atualizar nota Inexistente de um anime",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status deve ser 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Resposta deve conter mensagem de erro correta\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"detail\", \"Anime não encontrado no banco de dados\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/media/rate/anime/1?rating=10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"media",
						"rate",
						"anime",
						"1"
					],
					"query": [
						{
							"key": "rating",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Atualizando avaliação com nota inválida",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code deve ser 400 (Bad Request)\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Resposta contém detalhe do erro de validação\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"detail\");\r",
							"    pm.expect(jsonData.detail).to.eql(\"A nota deve estar entre 0 e 10.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/media/rate/anime/92?rating=-2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"media",
						"rate",
						"anime",
						"92"
					],
					"query": [
						{
							"key": "rating",
							"value": "-2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Atualizando nota com ID inválida",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code deve ser 422 (Unprocessable Entity)\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"Resposta contém detalhe de erro de parsing\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"detail\");\r",
							"    pm.expect(jsonData.detail[0]).to.have.property(\"type\", \"int_parsing\");\r",
							"    pm.expect(jsonData.detail[0]).to.have.property(\"loc\");\r",
							"    pm.expect(jsonData.detail[0].loc).to.include(\"path\");\r",
							"    pm.expect(jsonData.detail[0].loc).to.include(\"media_id\");\r",
							"    pm.expect(jsonData.detail[0]).to.have.property(\"msg\", \"Input should be a valid integer, unable to parse string as an integer\");\r",
							"    pm.expect(jsonData.detail[0]).to.have.property(\"input\", \"Q\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/media/rate/anime/Q?rating=10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"media",
						"rate",
						"anime",
						"Q"
					],
					"query": [
						{
							"key": "rating",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Deletando avaliação de um anime",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Testa se o status da resposta é 200\r",
							"pm.test(\"Status deve ser 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Testa se a resposta é um JSON\r",
							"pm.test(\"Resposta deve ser JSON\", function() {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// Testa se a mensagem retornada está correta\r",
							"pm.test(\"Mensagem correta\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Anime removido do banco de dados\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "http://localhost:8000/media/rate/anime/92/"
			},
			"response": []
		},
		{
			"name": "Deleta avaliação inexistente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code deve ser 404 (Not Found)\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Resposta contém detalhe do erro\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"detail\");\r",
							"    pm.expect(jsonData.detail).to.eql(\"Anime não encontrado no banco de dados\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "http://localhost:8000/media/rate/anime/92/"
			},
			"response": []
		},
		{
			"name": "Deletando anime com ID inválida",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code deve ser 422 (Unprocessable Entity)\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"Resposta contém detalhe de erro de parsing\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"detail\");\r",
							"    pm.expect(jsonData.detail[0]).to.have.property(\"type\", \"int_parsing\");\r",
							"    pm.expect(jsonData.detail[0]).to.have.property(\"loc\");\r",
							"    pm.expect(jsonData.detail[0].loc).to.include(\"path\");\r",
							"    pm.expect(jsonData.detail[0].loc).to.include(\"media_id\");\r",
							"    pm.expect(jsonData.detail[0]).to.have.property(\"msg\", \"Input should be a valid integer, unable to parse string as an integer\");\r",
							"    pm.expect(jsonData.detail[0]).to.have.property(\"input\", \"Q\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "http://localhost:8000/media/rate/anime/Q/"
			},
			"response": []
		}
	]
}